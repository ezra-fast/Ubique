goal: a linux implant written in C++ that uses lua/python modules for high level logic

modules:
    - reverse shell (to dedicated server)
    - steal file system (dump to dedicated GitHub)
    - encrypt file system (conditionally if there is at least 1 writable file in at least 1 user home folder)
    - system information (installed software, user home folders, superusers, etc.; dump to dedicated GitHub)
    - pull down and execute any raw shellcode string from dedicated GitHub
    - pull down and execute a cryptominer; (this implant should only be installed if the implant has been running for several days without removal)


notes:
    - see what you can learn from: https://github.com/n1nj4sec/pupy to load interpreters into memory
    - use which command to dynamically resolve the paths to executables used in system commands instead of relying on them being on the path
    - https://docs.python.org/3/extending/embedding.html
    - always catch exceptions as below:
                        try {
                            std::cout << "this means that an error was not encountered" << '\n';
                        }
                     
                        catch (const std::exception& e) {
                            std::cout << e.what() << '\n';          // catching all known standard errors
                        }
                        catch (...) {
                            // e.what() does not work if there is no specific error object being caught, because a non-existent object cannot have a what() method
                            std::cout << "An unknown error occurred" << '\n';
                        }
    - use constexpr and RSA to obfuscate PAC strings at compile time 
            - one PAC should be read access to the GitHub to establish contact and receive instruction
            - another PAC should be for reading and staging modules
            - a third PAC should be for dumping the output of modules to the C2 
                    - (output should be symmetrically encrypted with a hardcoded key that is de-obfuscated at runtime)
    - there needs to be a recovery function that execution is passed to upon error
            - check to see if internet is accessible (HTTP request to https://www.google.com)
            - if not, simply wait and try once every 24 hours
            - on the 7th day of no contact, deploy a hardcoded ransom routine


architecture:
    - a main C++ application that establishes encrypted C2 communication with server over https             (main.cpp)
    - for a given module
            - if lua based:
                    - start a fresh lua interpreter, bring down the dependencies and module, and run it with the lua interpreter
                    - these can be either bytecode or plaintext files
                    - try to statically compile luarocks modules into .so objects and just link modules against them
            - if python based:
                    - the presence of the python interpreter should be based on `which python` and `which python3`
                    - a python3 module should only be run with the native interpreter once dependencies are checked for
                    - the heavily functional modules should be python3 based
                    - resolve dependencies using the technique from BHP
            - if an executable:
                    - pull down and write to a hidden file; once the process is started, wipe out the file

core.cpp needs to:
    - establish irregular contact with the C2 server over https (the first contact should happen immediately; this removes the need for reverse shells)
    - establish persistence and back itself up in the file system (copies should be hidden files)
    - instantiate the lua interpreter when needed
    - be able to load modules into memory instead of dropping them as files
    - catch all errors and pass execution to a recovery function


